---
import { Image } from "astro:assets";

interface TextContent {
    type: "text";
    value: string | number;
}

const DEFAULT_IMAGE_SIZE = 36;
interface ImageContent {
    type: "image";
    src: string;
    alt: string;
    width?: number;
    height?: number;
}

type CellContent = TextContent | ImageContent;

interface DataRow {
    [key: string]: CellContent | string | number;
}

interface Props {
    data: DataRow[];
    headers?: string[];
    className?: string;
}

const { data = [], headers, className = "" } = Astro.props as Props;
const computedHeaders: string[] =
    headers ?? (data[0] ? Object.keys(data[0]) : []);
---

<div>
    <table class={className}>
        <thead>
            <tr>
                {computedHeaders.map((header) => <th>{header}</th>)}
            </tr>
        </thead>
        <tbody>
            {
                data.map((row) => (
                    <tr>
                        {computedHeaders.map((header) => {
                            const cell = row[header];
                            return (
                                <td>
                                    {typeof cell === "object" &&
                                    cell.type === "text" ? (
                                        cell.value
                                    ) : typeof cell === "object" &&
                                      cell.type === "image" ? (
                                        <Image
                                            src={cell.src}
                                            alt={cell.alt}
                                            width={
                                                cell.width || DEFAULT_IMAGE_SIZE
                                            }
                                            height={
                                                cell.height ||
                                                DEFAULT_IMAGE_SIZE
                                            }
                                        />
                                    ) : (
                                        cell
                                    )}
                                </td>
                            );
                        })}
                    </tr>
                ))
            }
        </tbody>
    </table>
</div>

<style>
    th {
        padding: var(--sl-nav-pad-x);
    }

    td {
        padding-inline-start: 1rem;
        vertical-align: middle;
    }

    td img {
        margin: 0 auto;
    }

    @media (prefers-color-scheme: dark) {
        tr:hover {
            background: var(--sl-color-gray-7);
            box-shadow: var(--sl-shadow-sm);
        }
    }
</style>
